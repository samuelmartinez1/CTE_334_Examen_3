# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Nuevo_nido
                                 A QGIS plugin
 Este pluggin generara un zona de influencia al posicionamiento colibri esmeralda
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Carlos Antonio Archaga Martinez
        email                : caarchaga@unah.hn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QDate
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QMessageBox ,QTableWidgetItem
from qgis.core import QgsProject 
from qgis.core import QgsFeature ,QgsGeometry,QgsPoint

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .nuevo_nido_dialog import Nuevo_nidoDialog
from .Tabla_impactos import tabla_dialog
import os.path


class Nuevo_nido:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Nuevo_nido_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Nuevo')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Nuevo_nido', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/nuevo_nido/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Nuevo nido '),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Nuevo'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Nuevo_nidoDialog()
            self.dlg.cmbnido.currentTextChanged.connect(self.event_estadochange)  
        mapa = self.iface.mapCanvas() 
        self.dlg.spbcoorx.setValue(mapa.center().x()) 
        self.dlg.spbcoory.setValue(mapa.center().y()) 
        self.dlg.QTDate.setDate(QDate.currentDate())
        capas_formulario = []
        for lyr in mapa.layers():
            capas_formulario.append(lyr.name())
        capas_faltantes = []
        if not "Avistamientos" in capas_formulario:
            capas_faltantes.append("Avistamientos")
        if not "Buffer Nidos" in capas_formulario:
            capas_faltantes.append("Buffer Nidos") 
        if capas_faltantes:
            msg = "Faltan las siguientes capas en el proyecto para seguir"
            for lyrs in capas_faltantes:
                msg += f"\n {lyrs}" 
            QMessageBox.critical(self.dlg,"capas faltantes" , msg)
            return 
        QMessageBox.information(self.dlg,"Mensaje","Esto debe correr siempre") 
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            QMessageBox.information(self.dlg,"Mensaje","Esto debe correr una vez si presiona ok") 
            lry_avistamientos = QgsProject.instance().mapLayersByName("Avistamientos")[0]
            lry_buffers = QgsProject.instance().mapLayersByName("Buffer Nidos")[0] 
            lry_buffer_lineal = QgsProject.instance().mapLayersByName("Buffer Lineal")[0] 
            indice = lry_avistamientos.fields().indexOf("nidoID") 
            indice_max = lry_avistamientos.maximumValue(indice) + 1 
            coorx = self.dlg.spbcoorx.value() 
            coory = self.dlg.spbcoory.value() 
            valor_especie = self.dlg.cmbespecie.currentText() 
            valor_nido = self.dlg.cmbnido.currentText() 
            valor_buffer = self.dlg.spbbuffer.value() 
            valor_fecha = self.dlg.QTDate.date() 
            feature_nido = QgsFeature(lry_avistamientos.fields())
            feature_nido.setAttribute( "id" ,indice_max) 
            feature_nido.setAttribute( "coord_x",coorx) 
            feature_nido.setAttribute( "coord_y",coory) 
            feature_nido.setAttribute( "fecha",valor_fecha) 
            feature_nido.setAttribute( "especie",valor_especie) 
            feature_nido.setAttribute( "estado",valor_nido) 
            feature_nido.setAttribute( "dist_buf",valor_buffer) 
            feature_nido.setAttribute( "nidoID",indice_max) 
            geom = QgsGeometry(QgsPoint(coorx,coory)) 
            feature_nido.setGeometry(geom) 
            pr = lry_avistamientos.dataProvider() 
            pr.addFeatures([feature_nido])
            lry_avistamientos.reload()
            pr = lry_buffers.dataProvider()
            buffer = geom.buffer(valor_buffer,10)
            feature_nido.setGeometry(buffer) 
            pr.addFeatures([feature_nido]) 
            lry_buffers.reload() 
            tabla_impactos = tabla_dialog()
            bb = buffer.boundingBox()
            lineal = lry_buffer_lineal.getFeatures(bb) 
            for linea in lineal:
                idvar = linea.attribute("Proyecto")
                idtipo = linea.attribute("Tipo") 
                idbuffer = linea.geometry().distance(geom) 
                if idbuffer < valor_buffer:
                    fila = tabla_impactos.tbl_impactos.rowCount() 
                    tabla_impactos.tbl_impactos.insertRow(fila)
                    tabla_impactos.tbl_impactos.setItem(fila,0,QTableWidgetItem(str(idvar)))
                    tabla_impactos.tbl_impactos.setItem(fila,1,QTableWidgetItem(idtipo))
                    tabla_impactos.tbl_impactos.setItem(fila,2,QTableWidgetItem(f"{idbuffer:.2f}"))
            tabla_impactos.tbl_impactos.sortItems(2)
            tabla_impactos.show() 
            tabla_impactos.exec_()
        else:
            QMessageBox.information(self.dlg,"Mensaje","Esto debe correr una vez si presiona cancel o exit")  
    def event_estadochange(self,estado):
        if estado == "Nido Activo de Colibrí Esmeralda ":
            self.dlg.spbbuffer.setValue(600) 
        elif estado == "Nido Inactivo de Colibrí Esmeralda ":
            self.dlg.spbbuffer.setValue(300)
        elif estado == "Nido Activo de Colibrí":
            self.dlg.spbbuffer.setValue(400)
        elif estado == "Nido Inactivo de Colibrí ": 
            self.dlg.spbbuffer.setValue(200)
        elif estado == "Nido Activo de No Identificado":
            self.dlg.spbbuffer.setValue(200)
        elif estado == "Nido Inactivo de No Identificado ":
            self.dlg.spbbuffer.setValue(100)



        
